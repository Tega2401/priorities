{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","tasks","setTasks","task","setTask","d","Date","className","getDate","getMonth","getFullYear","onSubmit","e","preventDefault","newTask","id","getTime","type","completed","concat","TextField","label","onChange","target","value","Button","variant","color","map","onClick","updatedTask","filter","handleDelete","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAwEeA,MAlEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,KA4BPC,EAAI,IAAIC,KAGd,OACE,sBAAKC,UAAU,MAAf,UACA,qBAAKA,UAAU,SAAf,SACA,yDAEA,sBAAKA,UAAU,OAAf,UACA,sBAAKA,UAAU,QAAf,cAAwB,oCAAM,IAAID,MAAOE,aAAzC,OACA,sBAAKD,UAAU,SAAf,cAAyB,6BAdR,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAClE,OAAQ,SAAU,YAAa,UAAW,WAAY,YAaZF,EAAEI,iBAC5C,sBAAKF,UAAU,QAAf,cAAwB,oCAAM,IAAID,MAAOI,uBAEzC,qBAAKH,UAAU,OAAf,SACE,uBAAMI,SAtCQ,SAACC,GACjBA,EAAEC,iBAEF,IAAMC,EAAU,CACdC,IAAI,IAAIT,MAAOU,UACfC,KAAMd,EACNe,WAAW,GAGbhB,EAAS,YAAID,GAAOkB,OAAOL,IAC3BV,EAAQ,KA4BN,UACE,cAACgB,EAAA,EAAD,CACEL,GAAG,iBACHM,MAAM,iBACNJ,KAAK,OACLK,SAAU,SAACV,GAAD,OAAOR,EAAQQ,EAAEW,OAAOC,QAClCA,MAAOrB,EACPI,UAAU,UACV,cAACkB,EAAA,EAAD,CACAC,QAAQ,YACRC,MAAM,UACNV,KAAK,SACLV,UAAU,SAJV,oBASHN,EAAM2B,KAAI,SAACzB,GAAD,OACX,sBAAmBI,UAAU,OAA7B,cAAqC,qBAAKA,UAAU,QAAf,SAAwBJ,EAAKc,OAAlE,IAA8E,oCAAM,cAAC,IAAD,CAAYV,UAAU,SAASsB,QAAS,kBA1ChI,SAAuBd,GACnB,IAAMe,EAAc,YAAI7B,GAAO8B,QAAO,SAAC5B,GAAD,OAAUA,EAAKY,KAAOA,KAE5Db,EAAS4B,GAuCyHE,CAAa7B,EAAKY,OAAtE,SAApEZ,EAAKY,WCtDNkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.096a22c7.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [task, setTask] = useState('');\n\n  const handleAdd = (e) => {\n    e.preventDefault();\n\n    const newTask = {\n      id: new Date().getTime(),\n      type: task,\n      completed: false\n    }\n\n    setTasks([...tasks].concat(newTask))\n    setTask('')\n\n  }\n\n  function handleDelete (id)  {\n      const updatedTask = [...tasks].filter((task) => task.id !== id)\n\n      setTasks(updatedTask)\n  }\n\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n\n  const d = new Date();\n\n\n  return (\n    <div className='App'>\n    <div className='Header'>\n    <h1>Welcome to Priorities</h1>\n    </div>\n    <div className='Date'>\n    <div className='today'> <h1> {new Date().getDate()}</h1> </div>\n    <div className='monthh'> <h2>{(monthNames[d.getMonth()])}</h2></div>\n    <div className='month'> <h2> {new Date().getFullYear()}</h2></div>\n    </div>\n    <div className='form'>\n      <form onSubmit={handleAdd}>\n        <TextField\n          id=\"standard-basic\"\n          label=\"Enter Priority\"\n          type='text'\n          onChange={(e) => setTask(e.target.value)}\n          value={task}\n          className=\"input\" />\n          <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type='submit'\n          className='inputt'>\n          +\n          </Button>\n      </form>\n      </div>\n      {tasks.map((task) =>\n      <div key={task.id} className='todo'> <div className='tasks'>{task.type}</div> <div> <DeleteIcon className='delete' onClick={() => handleDelete(task.id)}/> </div>\n      </div>)}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}